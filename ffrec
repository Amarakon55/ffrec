#!/bin/sh

: "${config_dir:=${XDG_CONFIG_HOME:-$HOME/.config}/ffrec}"
: "${config_file:=$config_dir/ffrec.conf}"

[ -f "$config_file" ] && . "$config_file"

cleanup() { rm -f $TMPFILE; }

trap cleanup EXIT
trap exit INT HUP TERM

main() {
    parse_opts "$@"

    ffmpegcheck="$(pgrep -f ffmpeg | wc -l)"
    ffmpegcheckid="$(pgrep -f ffmpeg | tail -1)"

    [ -n "$audio_encoder_option" ] && audio_encoder="$audio_encoder_arguments"
    [ -z $audio_encoder ] && audio_encoder="flac"

    [ -n "$audio_extension_option" ] && audio_extension="$audio_extension_arguments"
    [ -z $audio_extension ] && audio_extension="$audio_encoder"
	
    [ -n "$video_encoder_option" ] && video_encoder="$video_encoder_arguments"
    [ -z $video_encoder ] && video_encoder="libx264"

    [ -n "$video_extension_option" ] && video_extension="$video_extension_arguments"
    [ -z $video_extension ] && video_extension="mkv"

    [ -n "$frame_rate_option" ] && frame_rate=$frame_rate_arguments
    [ -z $frame_rate ] && frame_rate=60

    [ -n "$preset_option" ] && preset="$preset_arguments"
    [ -z $preset ] && preset="medium"

    { [ -n "$location" ] && dir=$location_arguments; } ||
    { dir=~/.local/share/ffrec; }

    { [ -n "$title" ] && title="$title_arguments"; } ||
    { title="ffmpeg-$(date +'%Y-%m-%d_%R:%S')"; }

    { [ -n "$monitor" ] && mon=`randr $monitor_arguments`; } ||
    { mon=$(randr $(printmon)); }

    { [ -n "$size" ] && size=$size_arguments ; } ||
    { size="$(xrandr | grep primary | cut -d ' ' -f 4 | cut -d + -f 1)"; }

    if [ -n "$help" ]; then
        help
    elif [ -n "$pause" ]; then
        [ "$ffmpegcheck" -ge 1 ] && ffmpegpause="$(grep State /proc/$ffmpegcheckid/status | cut -d '(' -f2 | cut -d ')' -f1)"
        if [ "$ffmpegpause" = "stopped" ]; then
	   pkill -CONT "^ffmpeg$"
        else
	   pkill -STOP "^ffmpeg$"
        fi
    elif [ -n "$end" ]; then
        pkill "^ffmpeg$" & kill $$ & rm -f /tmp/ffmpeg-*
    elif [ -n "$dmenu" ]; then
	dmenu="$(printf 'audio\ndisplay\nwebcam' | dmenu -i -p FFRec)"
	if [ "$dmenu" = "audio" ]; then
	    record_audio
	elif [ "$dmenu" = "display" ]; then
	    record_display
	elif [ `printf "$dmenu" | grep -E "audio|display" | wc -l` -eq 2 ]; then
	    record_both
	elif [ "$dmenu" = "webcam" ]; then
	    record_webcam
	elif [ `printf "$dmenu" | grep -E "audio|webcam" | wc -l` -eq 2 ]; then
	    record_audiocam
	fi

    elif [ -n "$audio" -a -n "$display" ]; then
	record_both
    elif [ -n "$audio" -a -n "$webcam" ]; then
	record_audiocam
    elif [ -n "$audio" ]; then
	record_audio
    elif [ -n "$display" ]; then
        record_display
    elif [ -n "$webcam" ]; then
        record_webcam
    else
        help
    fi
}

record_base() {
    TMPFILE=`mktemp -t $title.XXXXXXX`

    [ ! -d $dir/$1 ] && mkdir -p $dir/$1
    cmd -hide_banner -c:v $video_encoder -r $frame_rate -c:a $audio_encoder -preset $preset "$dir/$1/$title.$2" 2> $TMPFILE &\
    while [ -f $TMPFILE ]; do
	printf "\r`cat -A $TMPFILE | tr ' ' '\n' | grep time= | tail -1 | awk -F time= {'print $2'} | cut -d '.' -f 1`"
	sleep .001
    done
}

record_audio() {
    cmd() { ffmpeg -n -f alsa -i default "$@"; }
    record_base Audio $audio_extension
}

record_display() {
    cmd() { ffmpeg -n -f x11grab -s "$size" -i "$mon" "$@"; }
    record_base Display $video_extension
}

record_both() {
    cmd() { ffmpeg -n -f alsa -i default -f x11grab -s "$size" -i "$mon" "$@"; }
    record_base Display $video_extension
}

record_webcam(){
    cmd() { ffmpeg -n -f v4l2 -i /dev/video0 "$@"; }
    record_base Webcam $video_extension
}

record_audiocam(){
    cmd() { ffmpeg -n -f alsa -i default -f v4l2 -i /dev/video0 "$@"; }
    record_base Webcam $video_extension
}

randr() { printf ":0.0+$(xrandr | grep ' connected' | sed 's/ primary//g' | tail -$(expr $@ + 1) | head -1 | awk -F '+' '{print $2","$3}' | cut -d ' ' -f 1)"; }

help() {
    printf "Usage:	ffrec [option]

Options:
  -d|--display         │ Record display
  -a|--audio           │ Record audio
  -w|--webcam          │ Record webcam
  -D|--dmenu           │ Use Dmenu to choose what to record
                       │
  -m|--monitor         │ Choose the monitor to record
  -s|--size            │ Choose the size
  -l|--location        │ Choose the directory to record to
  -t|--title           │ Choose the output file
                       │
-fps|--frame-rate      │ Choose the frame rate (defaults to 60)
 -ps|--preset          │ Choose the encoder's preset (defaults to medium)
 -ae|--audio-encoder   │ Choose the audio encoder (defaults to flac)
 -ve|--video-encoder   │ Choose the video encoder (defaults to libx264)
 -ax|--audio-extension │ Choose the audio extension (defaults to audio encoder)
 -vx|--video-extension │ Choose the video extension (defaults to mkv)
                       │
  -p|--pause           │ Pause the recording
  -e|--end             │ End the recording
  -h|--help            │ Print this help message and exit
"
}

parse_opts() {
    while [ $# -gt 0 ]; do
	case "$1" in
	    -h|--help)
		help=1
		shift
		;;
	    -ae|--audio-encoder)
		audio_encoder_option=1
		shift
		audio_encoder_arguments="$@"
		;;
	    -ve|--video-encoder)
		video_encoder_option=1
		shift
		video_encoder_arguments="$@"
		;;
	    -ax|--audio-extension)
		audio_extension_option=1
		shift
		audio_extension_arguments="$@"
		;;
	    -vx|--video-extension)
		video_extension_option=1
		shift
		video_extension_arguments="$@"
		;;
	    -fps|--frame-rate)
		frame_rate_option=1
		shift
		frame_rate_arguments="$@"
		;;
	    -ps|--preset)
		preset_option=1
		shift
		present_arguments="$@"
		;;
	    -l|--location)
		location=1
		shift
		location_arguments="$@"
		;;
	    -t|--title)
		title=1
		shift
		title_arguments="$@"
		;;
	    -m|--monitor)
		monitor=1
		shift
		monitor_arguments="$@"
		;;
	    -s|--size)
		size=1
		shift
		size_arguments="$@"
		;;
	    -p|--pause)
		pause=1
		shift
		;;
	    -e|--end)
		end=1
		shift
		;;
	    -D|--dmenu)
		dmenu=1
		shift
		;;
	    -a|--audio)
		audio=1
		shift
		;;
	    -d|--display)
		display=1
		shift
		;;
	    -ad|-da)
		audio=1
		display=1
		shift
		;;
	    -w|--webcam)
		webcam=1
		shift
		;;
	    -aw|-wa)
		audio=1
		webcam=1
		shift
		;;
	    *)
		shift
		;;
	esac
    done
}

main "$@"
