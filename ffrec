#!/bin/sh

cleanup() { rm -f "$TMPFILE"; }
trap cleanup EXIT
trap exit INT HUP TERM

notrunning() { echo "$(basename $0) is not running so it cannot be "$@"." ; exit 1; }

main() { parse_opts "$@"
    ffmpegcheck="$(pgrep "^ffmpeg$" | wc -l)"
    ffmpegcheckid="$(pgrep "^ffmpeg$" | tail -1)"

    [ -n "$audio_encoder_option" ] && audio_encoder="$audio_encoder_arguments"
    [ -z $audio_encoder ] && audio_encoder="flac"

    [ -n "$audio_extension_option" ] && audio_extension="$audio_extension_arguments"
    [ -z $audio_extension ] && audio_extension="$audio_encoder"
	
    [ -n "$video_encoder_option" ] && video_encoder="$video_encoder_arguments"
    [ -z $video_encoder ] && video_encoder="libx264"

    [ -n "$video_extension_option" ] && video_extension="$video_extension_arguments"
    [ -z $video_extension ] && video_extension="mkv"

    [ -n "$rate_option" ] && rate=$rate_arguments
    [ -z $rate ] && rate=60

    [ -n "$preset_option" ] && preset="$preset_arguments"
    [ -z $preset ] && preset="medium"

    [ ! -n "$output_directory" ] && output_directory=~/.local/share/$(basename $0)

    [ -z "$title" ] && title="%F_%R:%S"
    title="$(date +$title)"
    newt="ffmpeg-$title"

    if [ -n "$monitor" ]; then mon=$(randr $monitor_arguments)
    else mon=$(randr $(printmon)); fi

    if [ -n "$size" ]; then size=$size_arguments
    else size="$(xrandr | grep primary | cut -d ' ' -f 4 | cut -d + -f 1)"; fi

    if [ -n "$pause" ]; then
	if [ "$ffmpegcheck" -ge 1 ]; then ffmpegpause="$(grep State /proc/$ffmpegcheckid/status | cut -d '(' -f2 | cut -d ')' -f1)"
	else notrunning "paused"; fi

	if [ "$ffmpegpause" = "stopped" ]; then pkill -CONT "^ffmpeg$"
	else pkill -STOP "^ffmpeg$"; fi
    elif [ -n "$end" ]; then
	if [ "$ffmpegcheck" -ge 1 ]; then pkill "^ffmpeg$" & kill $$ & rm -f /tmp/ffmpeg-*
	else notrunning "ended"; fi
    elif [ -n "$dmenu" ]; then
	dmenu="$(printf "audio\ndisplay\nwebcam" | dmenu -i -p FFRec)"
	if [ "$dmenu" = "audio" ]; then record_audio
	elif [ "$dmenu" = "display" ]; then record_display
	elif [ $(printf "$dmenu" | grep -E "audio|display" | wc -l) -eq 2 ]; then record_both
	elif [ "$dmenu" = "webcam" ];then record_webcam
	elif [ $(printf "$dmenu" | grep -E "audio|webcam" | wc -l) -eq 2 ]; then record_audiocam
	fi
    elif [ -n "$audio" -a -n "$display" ]; then
	record_both
    elif [ -n "$audio" -a -n "$webcam" ]; then
	record_audiocam
    elif [ -n "$audio" ]; then
	record_audio
    elif [ -n "$display" ]; then
        record_display
    elif [ -n "$webcam" ]; then
        record_webcam
    else
        help
    fi
}

record_base() {
    TMPFILE=$(mktemp -t $newt.XXXXXXX)

    newd="$output_directory/$1"
    [ ! -d $newd ] && mkdir -p $newd
    [ ! -n "$output_file" ] && output_file="$newd/$newt.$2"

    cmd -hide_banner -c:v $video_encoder -r $rate -c:a $audio_encoder -preset $preset "$output_file" 2> $TMPFILE &\
    while [ -f $TMPFILE ]; do
	printf "\r$(cat -A $TMPFILE | tr ' ' '\n' | grep time= | tail -1 | awk -F time= {'print $2'} | cut -d '.' -f 1)"
	sleep .001
    done
}

record_audio() {
    cmd() { ffmpeg -n -f alsa -i default "$@"; }
    record_base Audio $audio_extension
}

record_display() {
    cmd() { ffmpeg -n -f x11grab -s "$size" -i "$mon" "$@"; }
    record_base Display $video_extension
}

record_both() {
    cmd() { ffmpeg -n -f alsa -i default -f x11grab -s "$size" -i "$mon" "$@"; }
    record_base Display $video_extension
}

record_webcam(){
    cmd() { ffmpeg -n -f v4l2 -i /dev/video0 "$@"; }
    record_base Webcam $video_extension
}

record_audiocam(){
    cmd() { ffmpeg -n -f alsa -i default -f v4l2 -i /dev/video0 "$@"; }
    record_base Webcam $video_extension
}

randr() { printf ":0.0+$(xrandr | grep ' connected' | sed 's/ primary//g' | tail -$(expr $@ + 1) | head -1 | awk -F '+' '{print $2","$3}' | cut -d ' ' -f 1)"; }

help() {
    echo -n "Usage:	$(basename $0) [options]

Options:
-d|--display         │ Record display
-a|--audio           │ Record audio
-w|--webcam          │ Record webcam
-D|--dmenu           │ Use dmenu to choose what to record
                     │
-m|--monitor         │ Choose the monitor to record
-s|--size            │ Choose the size
-t|--title           │ Specify the title format (default is %F_%R:%S)
                     │
-r|--rate            │ Choose the frame rate (defaults to 60)
-p|--preset          │ Choose the encoder's preset (defaults to medium)
   --audio-encoder   │ Choose the audio encoder (defaults to flac)
   --video-encoder   │ Choose the video encoder (defaults to libx264)
   --audio-extension │ Choose the audio extension (defaults to audio encoder)
   --video-extension │ Choose the video extension (defaults to mkv)
                     │
-P|--pause           │ Pause the recording
-e|--end             │ End the recording
                     │
-h|--help            │ Print this help message and exit
"; }

parse_opts() {
    : "${config_dir:=${XDG_CONFIG_HOME:-$HOME/.config}/$(basename $0)}"
    : "${config_file:=$config_dir/$(basename $0).conf}"
    [ -f "$config_file" ] && . "$config_file"

    die() { echo "$*" >&2; exit 2; }  # complain to STDERR and exit with error
    needs_arg() { [ -z "$OPTARG" ] && die "No arg for --$OPT option"; }

    while getopts hr:p:l:t:m:s:PeDadw-: OPT; do
	# support long options: https://stackoverflow.com/a/28466267/519360
	if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
	    OPT="${OPTARG%%=*}"       # extract long option name2022
	    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
	    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
	fi
	case "$OPT" in
	    h | help)     	help ; exit 0 ;;
	    audio-encoder)	needs_arg ; audio_encoder_option=1 audio_encoder_arguments="$OPTARG" ;;
	    video-encoder)	needs_arg ; video=1 video_encoder_arguments="$OPTARG" ;;
	    audio-extension)	needs_arg ; audio_extension_option=1 audio_extension_arguments="$OPTARG" ;;
	    video-extension)	needs_arg ; video_extension_option=1 video_extension_arguments="$OPTARG" ;;
	    r | rate)		needs_arg ; rate_option=1 rate_arguments="$OPTARG" ;;
	    p | preset)		needs_arg ; preset_option=1 present_arguments="$OPTARG" ;;
	    t | title)		needs_arg ; title="$OPTARG" ;;
	    m | monitor)	needs_arg ; monitor=1 monitor_arguments="$OPTARG" ;;
	    s | size)		needs_arg ; size=1 size_arguments="$OPTARG" ;;
	    P | pause)		pause=1 ;;
	    e | end)		end=1 ;;
	    D | dmenu)		dmenu=1 ;;
	    a | audio)		audio=1 ;;
	    d | display)	display=1 ;;
	    w | webcam)		webcam=1 ;;
	    ??*)          	die "Illegal option --$OPT" ;;  # bad long option
	    ?)            	exit 2 ;;  # bad short option (error reported via getopts)
	esac
    done
    shift $((OPTIND-1)) # remove parsed options and args from $@ list

    { [ -d "$1" ] && output_directory="$1"; } ||
    { [ -n "$1" ] && output_file="$1"; }
}

main "$@"
